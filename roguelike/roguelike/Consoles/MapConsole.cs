using SadConsole;
using Microsoft.Xna.Framework;
using SadConsole.Game;
using SadConsole.Consoles;
using System;

namespace roguelike.Consoles
{
    public class MapConsole : SadConsole.Consoles.Console
    {
        GameObject playerEntity;

        public GameObject Player { get { return playerEntity; } }
        CellAppearance[,] mapData;
        RogueSharp.Map rogueMap;

        public MapConsole(int viewWidth, int viewHeight, int mapWidth, int mapHeight): base(mapWidth, mapHeight)
        {
            TextSurface.RenderArea = new Rectangle(0, 0, viewWidth, viewHeight);

            AnimatedTextSurface playerAnimation = new AnimatedTextSurface("default", 1, 1, Engine.DefaultFont);
            playerAnimation.CreateFrame();
            playerAnimation.CurrentFrame[0].Foreground = Color.Orange;
            playerAnimation.CurrentFrame[0].GlyphIndex = '@';

            playerEntity = new GameObject(Engine.DefaultFont);
            playerEntity.Animation = playerAnimation;

            playerEntity.Position = new Point(0, 0);

            GenerateMap();
        }

        public override void Render()
        {
            base.Render();
            playerEntity.Render();
        }
        public override void Update()
        {
            base.Update();
            playerEntity.Update();
        }

        public void MovePlayerBy(Point amount)
        {
            // Get the position the player will be at
            Point newPosition = playerEntity.Position + amount;

            // Check to see if the position is within the map
            if (new Rectangle(0, 6, Width, Height).Contains(newPosition)
                && rogueMap.IsWalkable(newPosition.X, newPosition.Y))
            {
                // Move the player
                playerEntity.Position += amount;

                // Scroll the view area to center the player on the screen
                TextSurface.RenderArea = new Rectangle(playerEntity.Position.X - (TextSurface.RenderArea.Width / 2),
                                                        playerEntity.Position.Y - (TextSurface.RenderArea.Height / 2),
                                                        TextSurface.RenderArea.Width, TextSurface.RenderArea.Height);

                // If he view area moved, we'll keep our entity in sync with it.
                playerEntity.RenderOffset = this.Position - TextSurface.RenderArea.Location;
            }
        }

        private void GenerateMap()
        {
            // Create the map
            RogueSharp.MapCreation.IMapCreationStrategy<RogueSharp.Map> mapCreationStrategy
                = new RogueSharp.MapCreation.RandomRoomsMapCreationStrategy<RogueSharp.Map>(Width, Height, 100, 20, 7);

            rogueMap = RogueSharp.Map.Create(mapCreationStrategy);

            mapData = new CellAppearance[Width, Height];
            // Loop through the map information generated by RogueSharp and create our cached visuals of that data
            foreach (var cell in rogueMap.GetAllCells())
            {
                if (cell.IsWalkable)
                {
                    mapData[cell.X, cell.Y] = new MapObjects.Floor();
                    mapData[cell.X, cell.Y].CopyAppearanceTo(this[cell.X, cell.Y]);
                }
                else
                {
                    mapData[cell.X, cell.Y] = new MapObjects.Wall();
                    mapData[cell.X, cell.Y].CopyAppearanceTo(this[cell.X, cell.Y]);
                }
            }

            RogueSharp.Random.IRandom random = new RogueSharp.Random.DotNetRandom();

            // Position the player somewhere on a walkable square
            while (true)
            {
                int x = random.Next(Width - 1);
                int y = random.Next(Height - 1);
                if (y > 5  && rogueMap.IsWalkable(x, y))
                {
                    playerEntity.Position = new Point(x, y);

                    // TODO: fix possitioning code
                    TextSurface.RenderArea = new Rectangle(playerEntity.Position.X - (TextSurface.RenderArea.Width / 2),
                                                            playerEntity.Position.Y - (TextSurface.RenderArea.Height / 2),
                                                            TextSurface.RenderArea.Width, TextSurface.RenderArea.Height);

                    playerEntity.RenderOffset = Position - TextSurface.RenderArea.Location;

                    break;
                }
            }
        }
    }
}
